// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.example.weather.`data`

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class FiveDayForecastJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<FiveDayForecast>() {
  private val options: JsonReader.Options = JsonReader.Options.of("list", "city")

  private val listOfForecastPeriodAdapter: JsonAdapter<List<ForecastPeriod>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, ForecastPeriod::class.java),
      emptySet(), "periods")

  private val forecastCityAdapter: JsonAdapter<ForecastCity> =
      moshi.adapter(ForecastCity::class.java, emptySet(), "city")

  public override fun toString(): String = buildString(37) {
      append("GeneratedJsonAdapter(").append("FiveDayForecast").append(')') }

  public override fun fromJson(reader: JsonReader): FiveDayForecast {
    var periods: List<ForecastPeriod>? = null
    var city: ForecastCity? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> periods = listOfForecastPeriodAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("periods", "list", reader)
        1 -> city = forecastCityAdapter.fromJson(reader) ?: throw Util.unexpectedNull("city",
            "city", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return FiveDayForecast(
        periods = periods ?: throw Util.missingProperty("periods", "list", reader),
        city = city ?: throw Util.missingProperty("city", "city", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: FiveDayForecast?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("list")
    listOfForecastPeriodAdapter.toJson(writer, value_.periods)
    writer.name("city")
    forecastCityAdapter.toJson(writer, value_.city)
    writer.endObject()
  }
}
