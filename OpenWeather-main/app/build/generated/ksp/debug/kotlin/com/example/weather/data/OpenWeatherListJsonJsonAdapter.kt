// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.example.weather.`data`

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class OpenWeatherListJsonJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<OpenWeatherListJson>() {
  private val options: JsonReader.Options = JsonReader.Options.of("dt", "pop", "main", "clouds",
      "wind", "weather")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "dt")

  private val doubleAdapter: JsonAdapter<Double> = moshi.adapter(Double::class.java, emptySet(),
      "pop")

  private val openWeatherListMainJsonAdapter: JsonAdapter<OpenWeatherListMainJson> =
      moshi.adapter(OpenWeatherListMainJson::class.java, emptySet(), "main")

  private val openWeatherListCloudsJsonAdapter: JsonAdapter<OpenWeatherListCloudsJson> =
      moshi.adapter(OpenWeatherListCloudsJson::class.java, emptySet(), "clouds")

  private val openWeatherListWindJsonAdapter: JsonAdapter<OpenWeatherListWindJson> =
      moshi.adapter(OpenWeatherListWindJson::class.java, emptySet(), "wind")

  private val listOfOpenWeatherListWeatherJsonAdapter: JsonAdapter<List<OpenWeatherListWeatherJson>>
      = moshi.adapter(Types.newParameterizedType(List::class.java,
      OpenWeatherListWeatherJson::class.java), emptySet(), "weather")

  public override fun toString(): String = buildString(41) {
      append("GeneratedJsonAdapter(").append("OpenWeatherListJson").append(')') }

  public override fun fromJson(reader: JsonReader): OpenWeatherListJson {
    var dt: Int? = null
    var pop: Double? = null
    var main: OpenWeatherListMainJson? = null
    var clouds: OpenWeatherListCloudsJson? = null
    var wind: OpenWeatherListWindJson? = null
    var weather: List<OpenWeatherListWeatherJson>? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> dt = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("dt", "dt", reader)
        1 -> pop = doubleAdapter.fromJson(reader) ?: throw Util.unexpectedNull("pop", "pop", reader)
        2 -> main = openWeatherListMainJsonAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("main", "main", reader)
        3 -> clouds = openWeatherListCloudsJsonAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("clouds", "clouds", reader)
        4 -> wind = openWeatherListWindJsonAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("wind", "wind", reader)
        5 -> weather = listOfOpenWeatherListWeatherJsonAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("weather", "weather", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return OpenWeatherListJson(
        dt = dt ?: throw Util.missingProperty("dt", "dt", reader),
        pop = pop ?: throw Util.missingProperty("pop", "pop", reader),
        main = main ?: throw Util.missingProperty("main", "main", reader),
        clouds = clouds ?: throw Util.missingProperty("clouds", "clouds", reader),
        wind = wind ?: throw Util.missingProperty("wind", "wind", reader),
        weather = weather ?: throw Util.missingProperty("weather", "weather", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: OpenWeatherListJson?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("dt")
    intAdapter.toJson(writer, value_.dt)
    writer.name("pop")
    doubleAdapter.toJson(writer, value_.pop)
    writer.name("main")
    openWeatherListMainJsonAdapter.toJson(writer, value_.main)
    writer.name("clouds")
    openWeatherListCloudsJsonAdapter.toJson(writer, value_.clouds)
    writer.name("wind")
    openWeatherListWindJsonAdapter.toJson(writer, value_.wind)
    writer.name("weather")
    listOfOpenWeatherListWeatherJsonAdapter.toJson(writer, value_.weather)
    writer.endObject()
  }
}
