// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.example.weather.`data`

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class OpenWeatherListMainJsonJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<OpenWeatherListMainJson>() {
  private val options: JsonReader.Options = JsonReader.Options.of("temp_min", "temp_max")

  private val doubleAdapter: JsonAdapter<Double> = moshi.adapter(Double::class.java, emptySet(),
      "temp_min")

  public override fun toString(): String = buildString(45) {
      append("GeneratedJsonAdapter(").append("OpenWeatherListMainJson").append(')') }

  public override fun fromJson(reader: JsonReader): OpenWeatherListMainJson {
    var temp_min: Double? = null
    var temp_max: Double? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> temp_min = doubleAdapter.fromJson(reader) ?: throw Util.unexpectedNull("temp_min",
            "temp_min", reader)
        1 -> temp_max = doubleAdapter.fromJson(reader) ?: throw Util.unexpectedNull("temp_max",
            "temp_max", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return OpenWeatherListMainJson(
        temp_min = temp_min ?: throw Util.missingProperty("temp_min", "temp_min", reader),
        temp_max = temp_max ?: throw Util.missingProperty("temp_max", "temp_max", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: OpenWeatherListMainJson?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("temp_min")
    doubleAdapter.toJson(writer, value_.temp_min)
    writer.name("temp_max")
    doubleAdapter.toJson(writer, value_.temp_max)
    writer.endObject()
  }
}
